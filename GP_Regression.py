# -*- coding: utf-8 -*-
"""GP regression_第三次

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S7bjogwrWaJY3kqcS2dSYXD3-oG-4rBs
"""

!pip install -q gpflow

# Commented out IPython magic to ensure Python compatibility.
import gpflow
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from gpflow.utilities import print_summary
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

# The lines below are specific to the notebook format
# %matplotlib inline
plt.rcParams["figure.figsize"] = (12, 6)

# Load dataset.
dataset = pd.read_csv('/content/drive/MyDrive/Toehold_Switch_Training_Library_v1.csv')
del dataset['Toehold switch number']
y = dataset.pop('ON/OFF')
x_train, x_test, y_train, y_test = train_test_split(dataset, y, test_size=0.3)

x_train = x_train.values
y_train = y_train.values
y_train = y_train.reshape(-1,1)

x_test = x_test.values
y_test = y_test.values
y_test = y_test.reshape(-1,1)

print(x_train.shape)
print(type(x_train))

k = gpflow.kernels.Matern52()
m = gpflow.models.GPR(data=(x_train, y_train), kernel=k, mean_function=None)
print_summary(m)
opt = gpflow.optimizers.Scipy()
opt_logs = opt.minimize(m.training_loss, m.trainable_variables, options=dict(maxiter=100))
print_summary(m)

x_test
mean,var = m.predict_y(x_test)
mean = np.array(mean)

r2_score(y_test, mean)